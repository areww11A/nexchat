–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ NexChat, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¢–ó. –¢–µ—Å—Ç—ã –±—É–¥—É—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏, –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ –æ—Ö–≤–∞—Ç—è—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (Auth, Chat, Media, Bot, Echo, Call, Monitoring). –ò—Å–ø–æ–ª—å–∑—É–µ–º supertest –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ jest –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤, —á—Ç–æ–±—ã DeepSeek —Ç–æ—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö API-–º–µ—Ç–æ–¥–æ–≤ –∏ WebSocket-—Å–æ–±—ã—Ç–∏–π –∏–∑ –¢–ó.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ NexChat
–û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: supertest (–¥–ª—è HTTP), ws (–¥–ª—è WebSocket), jest (—Ç–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫).
–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –¢–µ—Å—Ç—ã –≤ /services/<service-name>/tests/, —Ñ–∞–π–ª <service-name>.test.js.
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ WebSocket-—Å–æ–±—ã—Ç–∏—è –∏–∑ –¢–ó, –≤–∫–ª—é—á–∞—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –ö–æ–¥ —Ç–µ—Å—Ç–∞ ‚Äî –¥–æ 15-20 —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º.
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–∏—Å–µ:
bash

Collapse

Wrap

Copy
npm install --save-dev jest supertest ws
–ù–∞—Å—Ç—Ä–æ–π package.json:
json

Collapse

Wrap

Copy
"scripts": {
  "test": "jest"
}
–°–æ–∑–¥–∞–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ jest.config.js –≤ –∫–æ—Ä–Ω–µ —Å–µ—Ä–≤–∏—Å–∞:
javascript

Collapse

Wrap

Copy
module.exports = { testEnvironment: 'node' };
–ó–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, npm start –Ω–∞ –ø–æ—Ä—Ç—É –∏–∑ –¢–ó).
–®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç: –∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫. WebSocket –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–∞:
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:<port>'; // –ø–æ—Ä—Ç –∏–∑ –¢–ó
const wsUrl = 'ws://localhost:<port>';

describe('ServiceName', () => {
  // HTTP-—Ç–µ—Å—Ç
  it('should handle <endpoint> success', async () => {
    const res = await request(BASE_URL)
      .post('/<endpoint>')
      .send({ /* –¥–∞–Ω–Ω—ã–µ */ })
      .set('Authorization', 'Bearer <valid-jwt>');
    expect(res.status).toBe(200); // –∏–ª–∏ 201
    expect(res.body).toHaveProperty('<key>');
  });

  it('should handle <endpoint> error', async () => {
    const res = await request(BASE_URL)
      .post('/<endpoint>')
      .send({ /* –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */ });
    expect(res.status).toBe(400); // –∏–ª–∏ 401, 403, 404
  });

  // WebSocket-—Ç–µ—Å—Ç
  it('should emit <event>', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<valid-jwt>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('<event>');
      ws.close();
      done();
    });
    ws.on('open', () => ws.send(JSON.stringify({ action: '<trigger>' })));
  });
});
–¢–µ—Å—Ç—ã –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–ó)
1. Auth Service (–ø–æ—Ä—Ç 3001)
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:3001';
const wsUrl = 'ws://localhost:3001';

describe('Auth Service', () => {
  it('should register user', async () => {
    const res = await request(BASE_URL)
      .post('/auth/register')
      .send({ username: 'test', password: '123', email: 'test@example.com' });
    expect(res.status).toBe(201);
    expect(res.body).toHaveProperty('token');
  });

  it('should login user', async () => {
    const res = await request(BASE_URL)
      .post('/auth/login')
      .send({ username: 'test', password: '123' });
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('token');
  });

  it('should recover password', async () => {
    const res = await request(BASE_URL)
      .post('/auth/recover')
      .send({ email: 'test@example.com' });
    expect(res.status).toBe(200);
  });

  it('should change password', async () => {
    const res = await request(BASE_URL)
      .patch('/auth/password')
      .set('Authorization', 'Bearer <token>')
      .send({ newPassword: '1234' });
    expect(res.status).toBe(200);
  });

  it('should get user profile', async () => {
    const res = await request(BASE_URL)
      .get('/auth/user/1')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('username');
  });

  it('should update profile', async () => {
    const res = await request(BASE_URL)
      .patch('/auth/profile')
      .set('Authorization', 'Bearer <token>')
      .send({ status: 'Hello' });
    expect(res.status).toBe(200);
  });

  it('should upload avatar', async () => {
    const res = await request(BASE_URL)
      .post('/auth/avatar')
      .set('Authorization', 'Bearer <token>')
      .attach('avatar', 'test.jpg');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('avatarUrl');
  });

  it('should emit user_online', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<token>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('user_online');
      ws.close();
      done();
    });
  });
});
2. Chat Service (–ø–æ—Ä—Ç 3002)
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:3002';
const wsUrl = 'ws://localhost:3002';

describe('Chat Service', () => {
  it('should create personal chat', async () => {
    const res = await request(BASE_URL)
      .post('/chat/personal')
      .set('Authorization', 'Bearer <token>')
      .send({ userId: 2 });
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('chatId');
  });

  it('should create group chat', async () => {
    const res = await request(BASE_URL)
      .post('/chat/group')
      .set('Authorization', 'Bearer <token>')
      .send({ name: 'Group', members: [2, 3] });
    expect(res.status).toBe(200);
  });

  it('should send message', async () => {
    const res = await request(BASE_URL)
      .post('/chat/1/message')
      .set('Authorization', 'Bearer <token>')
      .send({ content: 'Hi' });
    expect(res.status).toBe(200);
  });

  it('should forward message', async () => {
    const res = await request(BASE_URL)
      .post('/chat/1/forward')
      .set('Authorization', 'Bearer <token>')
      .send({ messageId: 1, chatId: 2 });
    expect(res.status).toBe(200);
  });

  it('should block user', async () => {
    const res = await request(BASE_URL)
      .post('/chat/1/block')
      .set('Authorization', 'Bearer <token>')
      .send({ userId: 2 });
    expect(res.status).toBe(200);
  });

  it('should get blocked users', async () => {
    const res = await request(BASE_URL)
      .get('/chat/1/blocked')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should add reaction', async () => {
    const res = await request(BASE_URL)
      .post('/chat/message/1/reaction')
      .set('Authorization', 'Bearer <token>')
      .send({ emoji: 'üëç' });
    expect(res.status).toBe(200);
  });

  it('should get messages', async () => {
    const res = await request(BASE_URL)
      .get('/chat/1/messages')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should edit message', async () => {
    const res = await request(BASE_URL)
      .patch('/chat/message/1')
      .set('Authorization', 'Bearer <token>')
      .send({ content: 'Edited' });
    expect(res.status).toBe(200);
  });

  it('should delete message', async () => {
    const res = await request(BASE_URL)
      .delete('/chat/message/1')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should emit new_message', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<token>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('new_message');
      ws.close();
      done();
    });
    ws.on('open', () => ws.send(JSON.stringify({ action: 'send_message', chatId: 1 })));
  });
});
3. Media Service (–ø–æ—Ä—Ç 3003)
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:3003';
const wsUrl = 'ws://localhost:3003';

describe('Media Service', () => {
  it('should upload file', async () => {
    const res = await request(BASE_URL)
      .post('/media/chat/1/file')
      .set('Authorization', 'Bearer <token>')
      .attach('file', 'test.pdf');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('url');
  });

  it('should upload voice', async () => {
    const res = await request(BASE_URL)
      .post('/media/chat/1/voice')
      .set('Authorization', 'Bearer <token>')
      .attach('voice', 'test.mp3');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('transcription');
  });

  it('should upload sticker', async () => {
    const res = await request(BASE_URL)
      .post('/media/sticker')
      .set('Authorization', 'Bearer <token>')
      .attach('sticker', 'test.png');
    expect(res.status).toBe(200);
  });

  it('should upload chat avatar', async () => {
    const res = await request(BASE_URL)
      .post('/media/chat/1/avatar')
      .set('Authorization', 'Bearer <token>')
      .attach('avatar', 'test.jpg');
    expect(res.status).toBe(200);
  });

  it('should get file', async () => {
    const res = await request(BASE_URL)
      .get('/media/file/1')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should get stickers', async () => {
    const res = await request(BASE_URL)
      .get('/media/stickers')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should upload notification sound', async () => {
    const res = await request(BASE_URL)
      .post('/media/user/notification-sound')
      .set('Authorization', 'Bearer <token>')
      .attach('sound', 'test.mp3');
    expect(res.status).toBe(200);
  });

  it('should emit new_voice', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<token>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('new_voice');
      ws.close();
      done();
    });
  });
});
4. Bot Service (–ø–æ—Ä—Ç 3004)
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:3004';
const wsUrl = 'ws://localhost:3004';

describe('Bot Service', () => {
  it('should create bot', async () => {
    const res = await request(BASE_URL)
      .post('/bot')
      .set('Authorization', 'Bearer <token>')
      .send({ name: 'TestBot' });
    expect(res.status).toBe(200);
  });

  it('should get bots in chat', async () => {
    const res = await request(BASE_URL)
      .get('/bot/chat/1')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should add command', async () => {
    const res = await request(BASE_URL)
      .post('/bot/1/command')
      .set('Authorization', 'Bearer <token>')
      .send({ command: '/start' });
    expect(res.status).toBe(200);
  });

  it('should set webhook', async () => {
    const res = await request(BASE_URL)
      .post('/bot/1/webhook')
      .set('Authorization', 'Bearer <token>')
      .send({ url: 'http://example.com' });
    expect(res.status).toBe(200);
  });

  it('should set n8n auth', async () => {
    const res = await request(BASE_URL)
      .post('/bot/1/n8n-auth')
      .set('Authorization', 'Bearer <token>')
      .send({ token: 'n8n-token' });
    expect(res.status).toBe(200);
  });

  it('should emit command_executed', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<token>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('command_executed');
      ws.close();
      done();
    });
  });
});
5. Echo Service (–ø–æ—Ä—Ç 3005)
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:3005';
const wsUrl = 'ws://localhost:3005';

describe('Echo Service', () => {
  it('should create echo entry', async () => {
    const res = await request(BASE_URL)
      .post('/echo')
      .set('Authorization', 'Bearer <token>')
      .send({ content: 'Task', chatId: 1 });
    expect(res.status).toBe(200);
  });

  it('should get echo entries', async () => {
    const res = await request(BASE_URL)
      .get('/echo/chat/1')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should delete echo entry', async () => {
    const res = await request(BASE_URL)
      .delete('/echo/1')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should add vote', async () => {
    const res = await request(BASE_URL)
      .post('/echo/1/vote')
      .set('Authorization', 'Bearer <token>')
      .send({ value: 1 });
    expect(res.status).toBe(200);
  });

  it('should add tag', async () => {
    const res = await request(BASE_URL)
      .post('/echo/1/tag')
      .set('Authorization', 'Bearer <token>')
      .send({ tag: 'urgent' });
    expect(res.status).toBe(200);
  });

  it('should emit echo_created', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<token>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('echo_created');
      ws.close();
      done();
    });
  });
});
6. Call Service (–ø–æ—Ä—Ç 3006)
javascript

Collapse

Wrap

Copy
const request = require('supertest');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:3006';
const wsUrl = 'ws://localhost:3006';

describe('Call Service', () => {
  it('should start call', async () => {
    const res = await request(BASE_URL)
      .post('/call')
      .set('Authorization', 'Bearer <token>')
      .send({ userId: 2 });
    expect(res.status).toBe(200);
  });

  it('should answer call', async () => {
    const res = await request(BASE_URL)
      .post('/call/1/answer')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should end call', async () => {
    const res = await request(BASE_URL)
      .post('/call/1/end')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should enable video', async () => {
    const res = await request(BASE_URL)
      .post('/call/1/video')
      .set('Authorization', 'Bearer <token>')
      .send({ enabled: true });
    expect(res.status).toBe(200);
  });

  it('should join group call', async () => {
    const res = await request(BASE_URL)
      .post('/call/group/1/join')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should leave call', async () => {
    const res = await request(BASE_URL)
      .post('/call/1/leave')
      .set('Authorization', 'Bearer <token>');
    expect(res.status).toBe(200);
  });

  it('should emit call_offer', (done) => {
    const ws = new WebSocket(wsUrl + '?token=<token>');
    ws.on('message', (data) => {
      const msg = JSON.parse(data);
      expect(msg.event).toBe('call_offer');
      ws.close();
      done();
    });
  });
});
7. Monitoring Service (–ø–æ—Ä—Ç 3007)
javascript

Collapse

Wrap

Copy
const request = require('supertest');

const BASE_URL = 'http://localhost:3007';

describe('Monitoring Service', () => {
  it('should get user devices', async () => {
    const res = await request(BASE_URL)
      .get('/monitoring/user/1/devices')
      .set('Authorization', 'Bearer <admin-token>');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('devices');
  });

  it('should get active users in chat', async () => {
    const res = await request(BASE_URL)
      .get('/monitoring/chat/1/active')
      .set('Authorization', 'Bearer <admin-token>');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('users');
  });

  it('should deny non-admin access', async () => {
    const res = await request(BASE_URL)
      .get('/monitoring/user/1/devices')
      .set('Authorization', 'Bearer <user-token>');
    expect(res.status).toBe(403);
  });
});
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: npm start.
–í—ã–ø–æ–ª–Ω–∏ —Ç–µ—Å—Ç—ã: npm test.
–ü—Ä–æ–≤–µ—Ä—å –æ—Ç—á—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ/–ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã).
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
–ó–∞–º–µ–Ω–∏ <port> –Ω–∞ –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –¢–ó (3001‚Äì3007).
–ò—Å–ø–æ–ª—å–∑—É–π –≤–∞–ª–∏–¥–Ω—ã–π <token> (–ø–æ–ª—É—á–∏ —á–µ—Ä–µ–∑ /auth/login) –∏ <admin-token> –¥–ª—è Monitoring Service.
–î–ª—è —Ñ–∞–π–ª–æ–≤ (avatar, voice, file) —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, test.jpg, test.mp3).
WebSocket-—Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ <trigger>).