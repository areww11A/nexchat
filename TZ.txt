Техническое задание (ТЗ): NexChat — Мультиплатформенный мессенджер
Общее описание:
Название: NexChat
Цель: Создать мультиплатформенный мессенджер с минималистичным дизайном (вдохновлён Telegram), расширенными функциями (медиа, стикеры, звонки, боты, 'Эхо-пространство') и панелью управления (в стиле Rocket.Chat).
Платформы:
Сервер: Node.js, deploy через Docker Compose.
Мобильное приложение: iOS/Android (React Native).
Десктопное приложение: Windows/Mac/Linux (Electron).
Особенности: Поддержка медиа, пользовательских стикеров, кастомных звуков уведомлений, WebRTC-звонков, модульная структура для масштабирования.
Технические требования:
Языки и инструменты: Node.js v18+, Express v4.18, WebSocket (ws v8.14), SQLite (sqlite3), React Native v0.73+, Electron v28+, TypeScript, Docker v20+, Docker Compose v2+.
Стиль: Светлая тема (#FFFFFF фон, #000000 текст, #007AFF акцент), тёмная тема (#1C2526 фон, #E8ECEF текст, #00C4CC акцент), шрифт Roboto (16px Regular/Medium, 18px Bold).
Анимации: Переходы 300ms (Easing.ease), fade-in 200ms.
Этапы разработки:
Этап 1: Базовый сервер и API для чатов
1.1. Настройка сервера и авторизации
1.1.1. Инициализация сервера:
Установи Node.js, Express, WebSocket.
Настрой SQLite с таблицами: users, chats, chat_members, messages, reactions, stickers.
Запусти сервер на порту 3000 (/src/server.js).
Чекпоинт: Тест GET / (200 OK), запись в progress.json.
1.1.2. Реализация авторизации:
API: POST /api/auth/register (JWT, libsodium ключи), POST /api/auth/login.
Таблица users: transcribeVoice (BOOLEAN), notificationSoundUrl (TEXT).
WebSocket: подключение с токеном (?token=<jwt>), событие 'connected'.
Чекпоинт: Тесты на регистрацию (201), вход (200), ошибки (400, 409, 401), запись в progress.json.
1.2. Личные чаты
1.2.1. Создание личных чатов: API POST /api/chat/personal.
Чекпоинт: Тест на создание (200), ошибки (400, 409), запись в progress.json.
1.2.2. Отправка текстовых сообщений: API POST /api/message (шифрование libsodium), WebSocket 'new_message', 'message_read'.
Чекпоинт: Тест на отправку (200), ошибки (403, 404), WebSocket, запись в progress.json.
1.2.3. Получение сообщений: API GET /api/chat/:id/messages (пагинация).
Чекпоинт: Тест на получение (200), пагинацию, ошибки (404), запись в progress.json.
1.3. Групповые чаты
1.3.1. Создание групповых чатов: API POST /api/chat/group.
Чекпоинт: Тест на создание (200), ошибки (400), запись в progress.json.
1.3.2. Модерация и закрепление сообщений: API POST /api/chat/:id/moderate, POST /api/chat/:id/pin, WebSocket события.
Чекпоинт: Тесты на модерацию (200), закрепление (200), ошибки (403, 404), WebSocket, запись в progress.json.
1.3.3. Получение информации о группе: API GET /api/chat/:id.
Чекпоинт: Тест на получение (200), ошибки (404), запись в progress.json.
1.4. Добавление файлов, медиа и стикеров
1.4.1. Загрузка медиа: API POST /api/chat/:id/file (≤ 2 ГБ, ffmpeg для duration, STT для голосовых), WebSocket 'new_file'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415), WebSocket, запись в progress.json.
1.4.2. Управление стикерами: API POST /api/sticker (PNG/GIF, ≤ 512 КБ), GET /api/stickers, отправка через POST /api/message, WebSocket 'sticker_added'.
Чекпоинт: Тесты на загрузку (200), список (200), отправку (200), ошибки (413, 415), запись в progress.json.
1.4.3. Скачивание файлов: API GET /api/file/:messageId, GET /api/sticker/:stickerId.
Чекпоинт: Тест на скачивание (200), ошибки (404), запись в progress.json.
1.5. Система аватарок, реакции и уведомления
1.5.1. Аватарки: API POST /api/user/avatar, POST /api/chat/:id/avatar (≤ 5 МБ), WebSocket 'avatar_updated'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415), WebSocket, запись в progress.json.
1.5.2. Реакции: API POST /api/message/:id/reaction (эмодзи ≤ 10 символов), WebSocket 'reaction_added', 'reaction_removed'.
Чекпоинт: Тест на реакцию (200), ошибки (403, 404), WebSocket, запись в progress.json.
1.5.3. Кастомные звуки уведомлений: API POST /api/user/notification-sound (MP3/WAV, ≤ 1 МБ, ≤ 5 сек), WebSocket 'notification_sound_updated', 'notification'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415, 400), WebSocket, запись в progress.json.
Этап 2: Логика ботов и интеграция с n8n
2.1. Создание ботов
2.1.1. Регистрация ботов: API POST /api/bot, запись в bots и chat_members.
Чекпоинт: Тест на создание (200), ошибки (403, 404), запись в progress.json.
2.1.2. Получение списка ботов: API GET /api/chat/:id/bots.
Чекпоинт: Тест на получение (200), ошибки (404), запись в progress.json.
2.2. Конструктор ботов
2.2.1. Добавление команд: API POST /api/bot/:id/command, таблица bot_commands.
Чекпоинт: Тест на добавление (200), ошибки (403, 409), запись в progress.json.
2.2.2. Обработка команд: Логика /command, WebSocket 'command_executed'.
Чекпоинт: Тест на выполнение (200), WebSocket, запись в progress.json.
2.3. Интеграция с n8n
2.3.1. Настройка Webhook: API POST /api/bot/:id/webhook, таблица bot_webhooks.
Чекпоинт: Тест на настройку (200), ошибки (400, 403), запись в progress.json.
2.3.2. OAuth и выполнение: API POST /api/bot/:id/n8n-auth, вызов Webhook, WebSocket 'webhook_response'.
Чекпоинт: Тест на авторизацию (200), выполнение (200), ошибки (401), запись в progress.json.
Этап 3: 'Эхо-пространство'
3.1. Классификация сообщений
3.1.1. Создание записи: API POST /api/echo, таблица echo_space.
Чекпоинт: Тест на создание (200), ошибки (403, 404), запись в progress.json.
3.1.2. Логика классификации: Задача/идея/заметка, WebSocket 'echo_created'.
Чекпоинт: Тест на классификацию (200), WebSocket, запись в progress.json.
3.2. Хранение и синхронизация
3.2.1. Получение записей: API GET /api/chat/:id/echo.
Чекпоинт: Тест на получение (200), фильтры, запись в progress.json.
3.2.2. Удаление записей: API DELETE /api/echo/:id, WebSocket 'echo_deleted'.
Чекпоинт: Тест на удаление (200), ошибки (403, 404), WebSocket, запись в progress.json.
3.3. Интерактивные функции
3.3.1. Голосование: API POST /api/echo/:id/vote, таблица echo_votes, WebSocket 'vote_updated'.
Чекпоинт: Тест на голосование (200), ошибки (403, 404), WebSocket, запись в progress.json.
3.3.2. Теги и уведомления: API POST /api/echo/:id/tag, уведомления ('task_reminder'), WebSocket 'tag_added'.
Чекпоинт: Тест на теги (200), уведомления, WebSocket, запись в progress.json.
Этап 4: Звонки через WebRTC
4.1. Индивидуальные голосовые звонки
4.1.1. Инициация звонка: API POST /api/call, таблица calls.
Чекпоинт: Тест на создание (200), ошибки (400, 409), запись в progress.json.
4.1.2. Управление звонком: API POST /api/call/:id/answer, POST /api/call/:id/end, WebSocket 'call_offer', 'call_ended'.
Чекпоинт: Тест на управление (200), WebSocket, запись в progress.json.
4.2. Видеозвонки
4.2.1. Включение видео: API POST /api/call/:id/video, WebSocket 'video_state_changed'.
Чекпоинт: Тест на видео (200), ошибки (404, 409), WebSocket, запись в progress.json.
4.3. Групповые звонки
4.3.1. Присоединение к звонку: API POST /api/call/group/:chatId/join, таблицы group_calls, call_participants.
Чекпоинт: Тест на подключение (200), ошибки (403, 409), запись в progress.json.
4.3.2. Управление участниками: API POST /api/call/:id/leave, WebSocket 'participant_joined', 'active_speaker'.
Чекпоинт: Тест на управление (200), WebSocket, запись в progress.json.
Этап 5: Frontend на React Native (Мобильная версия, iOS/Android)
5.1. Экран авторизации и регистрации
5.1.1. Экран входа: Поля 'Имя пользователя', 'Пароль', кнопка 'Войти', поддержка биометрии (expo-local-authentication).
Чекпоинт: Тест на вход, биометрию, запись в progress.json.
5.1.2. Экран регистрации: Поля 'Имя пользователя', 'Пароль', 'Повторить пароль', валидация в реальном времени (debounce 300ms).
Чекпоинт: Тест на регистрацию, валидацию, запись в progress.json.
5.2. Главный экран (список чатов)
5.2.1. Список чатов: FlatList, аватар (48x48px), название, последнее сообщение, счётчик, push-уведомления (expo-notifications).
Чекпоинт: Тест на рендеринг, уведомления, запись в progress.json.
5.2.2. Поиск и фильтры: TextInput, кнопки фильтров, оффлайн-кэш (@react-native-async-storage).
Чекпоинт: Тест на поиск, оффлайн-режим, запись в progress.json.
5.3. Экран чата
5.3.1. Лента сообщений: ScrollView, текст (до 70%), медиа (200x200px), стикеры (150x150px), жесты (react-native-gesture-handler).
Чекпоинт: Тест на рендеринг, жесты, запись в progress.json.
5.3.2. Полноэкранный режим медиа: Фото/видео 100%, zoom до 3x, скачивание (expo-media-library).
Чекпоинт: Тест на просмотр, скачивание, запись в progress.json.
5.3.3. Поле ввода и интерактивность: TextInput, иконки (эмодзи, стикеры, файл, микрофон), автозаполнение (react-native-autocomplete-input).
Чекпоинт: Тест на ввод, автозаполнение, запись в progress.json.
5.4. Экран ботов и 'Эхо-пространства'
5.4.1. Экран ботов: FlatList, FAB 'Добавить бота'.
Чекпоинт: Тест на рендеринг, запись в progress.json.
5.4.2. Настройка бота: Поля 'Имя', 'Команды', 'Webhook'.
Чекпоинт: Тест на настройку, запись в progress.json.
5.4.3. 'Эхо-пространство': Tab Navigator (Tasks, Notes, Ideas), вибрация (expo-haptics).
Чекпоинт: Тест на рендеринг, вибрацию, запись в progress.json.
5.5. Экран звонков
5.5.1. Индивидуальный звонок: Видео/аватар 80%, кнопки (mute, video, end), фоновый режим (react-native-webrtc, expo-keep-awake).
Чекпоинт: Тест на звонок, фоновый режим, запись в progress.json.
5.5.2. Групповой звонок: Сетка 96x96px, активный спикер (рамка).
Чекпоинт: Тест на групповой звонок, запись в progress.json.
5.6. Панель управления
5.6.1. Основная структура: Боковая панель (300px/80%), свайп, вкладки.
Чекпоинт: Тест на рендеринг, жесты, запись в progress.json.
5.6.2. Управление чатами и ботами: Список групп, ботов, редактирование.
Чекпоинт: Тест на управление, запись в progress.json.
5.6.3. 'Эхо-пространство' и звонки: Фильтры, история звонков.
Чекпоинт: Тест на рендеринг, запись в progress.json.
5.6.4. Настройки, стикеры и звуки: Тема, уведомления, стикеры (FlatList), звуки (плеер).
Чекпоинт: Тест на настройки, загрузку стикеров/звуков, запись в progress.json.
5.7. Сборка и публикация
5.7.1. Сборка приложения: Expo EAS Build (eas build --platform all), иконка (512x512px), splash-screen.
Чекпоинт: Тест на сборку (APK/IPA), запись в progress.json.
5.7.2. Публикация: EAS Submit (eas submit --platform all).
Чекпоинт: Тест на симуляцию публикации, запись в progress.json.
Этап 6: Frontend на Electron (Десктопная версия, Windows/Mac/Linux)
6.1. Инициализация проекта
6.1.1. Настройка Electron: Electron v28+, main.js (окно 1200x800px, безрамочный), интеграция React (electron-vite).
Чекпоинт: Тест на запуск окна, запись в progress.json.
6.2. Экран авторизации и регистрации
6.2.1. Экран входа: Поля (400px), кнопка (48x160px), автозапуск (electron-store).
Чекпоинт: Тест на вход, автозапуск, запись в progress.json.
6.2.2. Экран регистрации: Поля (400px), кнопка (48x160px).
Чекпоинт: Тест на регистрацию, запись в progress.json.
6.3. Главный экран (список чатов)
6.3.1. Список чатов: Двухколоночный дизайн (300px список, 900px чат), системные уведомления (electron-notification).
Чекпоинт: Тест на рендеринг, уведомления, запись в progress.json.
6.3.2. Поиск и фильтры: Панель поиска (300x48px), выпадающее меню фильтров.
Чекпоинт: Тест на поиск, фильтры, запись в progress.json.
6.4. Экран чата
6.4.1. Лента сообщений: Сообщения (до 80%), медиа (400x400px), стикеры (200x200px), drag-and-drop (electron API).
Чекпоинт: Тест на рендеринг, drag-and-drop, запись в progress.json.
6.4.2. Полноэкранный режим медиа: Новое окно (BrowserWindow, 100% экрана).
Чекпоинт: Тест на просмотр, запись в progress.json.
6.4.3. Поле ввода и интерактивность: Поле (80%), кнопки (32x32px), горячие клавиши (Ctrl+Enter, Ctrl+R).
Чекпоинт: Тест на ввод, горячие клавиши, запись в progress.json.
6.5. Экран ботов и 'Эхо-пространства'
6.5.1. Экран ботов: Таблица (имя, чат, настройки).
Чекпоинт: Тест на рендеринг, запись в progress.json.
6.5.2. Настройка бота: Модальное окно (600x400px).
Чекпоинт: Тест на настройку, запись в progress.json.
6.5.3. 'Эхо-пространство': Вкладки в панели (300px), контент (900px).
Чекпоинт: Тест на рендеринг, запись в progress.json.
6.6. Экран звонков
6.6.1. Индивидуальный звонок: Окно 800x600px, видео/аватар 80%, tray (electron Tray API).
Чекпоинт: Тест на звонок, tray, запись в progress.json.
6.6.2. Групповой звонок: Сетка до 8x4 (128x128px).
Чекпоинт: Тест на групповой звонок, запись в progress.json.
6.7. Панель управления
6.7.1. Основная структура: Постоянная панель (300px), контент (900px).
Чекпоинт: Тест на рендеринг, запись в progress.json.
6.7.2. Управление чатами и ботами: Список групп, ботов, редактирование.
Чекпоинт: Тест на управление, запись в progress.json.
6.7.3. 'Эхо-пространство' и звонки: Фильтры, история звонков.
Чекпоинт: Тест на рендеринг, запись в progress.json.
6.7.4. Настройки, стикеры и звуки: Модальное окно (600x400px), перетаскивание файлов (electron API).
Чекпоинт: Тест на настройки, перетаскивание, запись в progress.json.
6.8. Сборка и публикация
6.8.1. Сборка приложения: electron-builder --win --mac --linux, настройки в package.json.
Чекпоинт: Тест на сборку (EXE/DMG/AppImage), запись в progress.json.
6.8.2. Автообновление: electron-updater с GitHub Releases.
Чекпоинт: Тест на симуляцию обновления, запись в progress.json.
Этап 7: Сборка и деплой с Docker Compose
7.1. Подготовка миграций базы данных
7.1.1. Настройка миграций:
Установи knex.js (npm install knex), настрой миграции для всех таблиц (knex migrate:make).
Пример миграции для users:
javascript


exports.up = knex => knex.schema.createTable('users', table => {
  table.increments('id').primary();
  table.string('username', 20).unique().notNullable();
  table.string('passwordHash').notNullable();
  table.string('avatarUrl');
  table.string('publicKey').notNullable();
  table.string('privateKey').notNullable();
  table.boolean('transcribeVoice').defaultTo(false);
  table.string('notificationSoundUrl');
  table.timestamp('createdAt').defaultTo(knex.fn.now());
});
exports.down = knex => knex.schema.dropTable('users');
Скрипт в package.json: "migrate": "knex migrate:latest".
Чекпоинт: Тест на миграцию (создание таблиц), запись в progress.json.
7.2. Создание Dockerfile
7.2.1. Настройка Dockerfile:
Файл:
dockerfile



FROM node:18
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run migrate
EXPOSE 3000
CMD ["npm", "start"]
Чекпоинт: Тест на сборку образа (docker build -t nexchat:test .), запись в progress.json.
7.3. Настройка Docker Compose
7.3.1. Создание docker-compose.yml:
Файл:
yaml



Копировать
version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - db-data:/app/data/db
      - uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
volumes:
  db-data:
  uploads:
Чекпоинт: Тест на запуск (docker-compose up -d), проверка GET / (200 OK), запись в progress.json.
7.3.2. Настройка окружения:
Создай setup.js:
javascript



const fs = require('fs');
const path = require('path');
['data/db', 'uploads'].forEach(dir => {
  const fullPath = path.join(__dirname, dir);
  if (!fs.existsSync(fullPath)) fs.mkdirSync(fullPath, { recursive: true });
});
Скрипт в package.json: "postinstall": "node setup.js".
Чекпоинт: Тест на создание директорий, запись в progress.json.
7.4. Тестирование и деплой
7.4.1. Локальное тестирование:
Запусти тесты в Docker: docker-compose run app npm test.
Проверь работу: curl http://localhost:3000.
Чекпоинт: Тест на успешное тестирование, запись в progress.json.
7.4.2. Деплой на сервер:
Скопируй проект: scp -r . user@server:/path/to/nexchat.
Запусти: cd /path/to/nexchat && docker-compose up -d.
Создай .env на сервере:
env



Копировать
JWT_SECRET=nexchat_secret_2025
Чекпоинт: Тест на деплой, проверка GET / (200 OK), запись в progress.json.
Инструкции по написанию кода:
Последовательность: Начинай с 1.1.1, переходи к следующему подэтапу после чекпоинта (код, тест, progress.json).
Структура:
Сервер: /src/server.js, /src/models/, /src/routes/, /src/utils/, /tests/.
Фронтенд: /src/shared/ (общие компоненты), /src/mobile/, /src/desktop/.
Чекпоинты:
Тест (Jest): позитивные, негативные, граничные случаи.
Тестирование: supertest (API), WebSocket-клиент, Expo/Electron запуск.
Запись в progress.json:
json


{"stage": 1, "substage": "1.1", "step": 1, "status": "completed", "description": "Сервер запущен", "completedAt": "2025-03-24T12:00:00Z"}
При ошибке: "Не удалось сохранить прогресс, продолжаю."
Уведомления: Если файл редактируется из предыдущего подэтапа: "Изменяется файл [имя] из подэтапа [номер]. Продолжить?"
Обработка ошибок: Логи (console.log, console.error), тайм-ауты (5 сек), повторные попытки (3 раза), лимит итераций (1000).
Тестирование:
Сервер: Jest + supertest.
Мобильное: Jest + @testing-library/react-native.
Десктопное: Jest + electron-mocha.
Вывод подэтапа: Код, тест, инструкции (npm start, docker-compose up, результат).