Техническое задание (ТЗ): NexChat — Мультиплатформенный мессенджер (Микросервисная архитектура)
Общее описание:
Название: NexChat
Цель: Создать мультиплатформенный мессенджер с минималистичным дизайном (вдохновлён Telegram), расширенными функциями (медиа, стикеры, звонки, боты, 'Эхо-пространство', голосовые сообщения, редактирование/удаление, пересылка, цитирование, профили, статусы, мультиязычность, блокировка собеседников, мониторинг устройств/IP для админа) и панелью управления (в стиле Rocket.Chat).
Платформы:
Сервер: Микросервисы на Node.js, deploy через Docker Compose/Kubernetes.
Веб-версия: React (Chrome, Firefox, Safari).
Мобильное приложение: iOS/Android (React Native).
Десктопное приложение: Windows/Mac/Linux (Electron).
Особенности: Микросервисная архитектура, мультиязычность (i18n), WebRTC-звонки, голосовые сообщения, пересылка/цитирование, мониторинг устройств/IP (админ), блокировка пользователей, интеграция с Graylog/Grafana/ELK/Zabbix (опционально).
Технические требования:
Языки и инструменты: Node.js v18+, Express v4.18, WebSocket (ws v8.14), PostgreSQL (каждый микросервис), Redis (кеширование), React v18+, React Native v0.73+, Electron v28+, TypeScript, Docker v20+, Docker Compose v2+, Kubernetes (опционально).
Цветовая палитра:
Светлая тема: Фон #FFFFFF, текст #000000, акцент #007AFF, второстепенный #666666.
Тёмная тема: Фон #1C2526, текст #E8ECEF, акцент #00C4CC, второстепенный #A9A9A9.
Шрифт: Roboto (Regular 16px, Medium 16px, Bold 18px, подписи 14px).
Анимации: Плавные (переходы 300ms Easing.ease, fade-in/out 200ms).
Мониторинг: Логи в Graylog, метрики в Grafana, аналитика в ELK, алерты в Zabbix (опционально).
Микросервисная архитектура:
Auth Service: Авторизация, профили, управление пользователями.
Chat Service: Личные и групповые чаты, сообщения, пересылка, цитирование, блокировка.
Media Service: Загрузка/обработка медиа, голосовых, стикеров.
Bot Service: Логика ботов, интеграция с n8n.
Echo Service: 'Эхо-пространство'.
Call Service: WebRTC-звонки.
Monitoring Service: Отслеживание устройств, IP, интеграция с Graylog/Grafana/ELK/Zabbix.
API Gateway: Единая точка входа (Express Gateway), маршрутизация, аутентификация JWT.
Database: PostgreSQL для каждого сервиса (отдельные схемы), Redis для кеширования сессий/событий.
Этапы разработки:
Этап 1: Auth Service (Авторизация и профили)
1.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, WebSocket, PostgreSQL (auth_db: users, sessions).
API Gateway: Маршруты /auth/* → Auth Service (порт 3001).
Чекпоинт: Тест GET /auth/health (200 OK), запись в progress.json.
1.2. Реализация авторизации и профиля:
API:
POST /auth/register: Регистрация (JWT, libsodium).
POST /auth/login: Вход (JWT, запись устройства и IP в sessions).
POST /auth/recover: Восстановление пароля (email, код).
PATCH /auth/password: Смена пароля.
GET /auth/user/:id: Профиль (username, status, birthDate, email, phone, isOnline, lastSeen).
PATCH /auth/profile: Обновление профиля.
Таблица users: id, username, passwordHash, email, phone (NULLABLE), status (TEXT, ≤ 50 символов), birthDate (DATE NULLABLE), transcribeVoice (BOOLEAN DEFAULT 0), notificationSoundUrl (TEXT), isOnline (BOOLEAN DEFAULT 0), lastSeen (TIMESTAMP), showTyping (BOOLEAN DEFAULT 1), showReadTimestamps (BOOLEAN DEFAULT 0), language (TEXT DEFAULT 'en').
Таблица sessions: id, userId, token, device (TEXT, e.g., "Chrome 120", "iOS 17"), ip (TEXT), createdAt, lastActive.
WebSocket: 'connected', 'user_online', 'user_offline', 'profile_updated'.
Мультиязычность: Хранение language в профиле, заголовок Accept-Language для API.
Чекпоинт: Тесты на регистрацию (201), вход (200), профиль (200), ошибки (400, 409, 401), WebSocket, запись в progress.json.
Этап 2: Chat Service (Чаты и сообщения)
2.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, WebSocket, PostgreSQL (chat_db: chats, chat_members, messages, blocked_users).
API Gateway: Маршруты /chat/* → Chat Service (порт 3002).
Чекпоинт: Тест GET /chat/health (200 OK), запись в progress.json.
2.2. Личные и групповые чаты:
API:
POST /chat/personal: Создание личного чата.
POST /chat/group: Создание группового чата (chat_members с isAdmin).
POST /chat/:id/message: Отправка текста (replyToMessageId для цитирования).
POST /chat/:id/forward: Пересылка сообщения (в другой chatId).
POST /chat/:id/block: Блокировка собеседника (в blocked_users), только для личных чатов.
GET /chat/:id/blocked: Список заблокированных (админ или владелец чата).
Таблица messages: id, chatId, userId, content, isEdited (BOOLEAN DEFAULT 0), isDeleted (BOOLEAN DEFAULT 0), readAt (TIMESTAMP NULLABLE), replyToMessageId (INTEGER NULLABLE), createdAt, updatedAt.
Таблица blocked_users: id, chatId, userId, blockedByUserId, createdAt.
WebSocket: 'new_message', 'message_read', 'message_forwarded', 'user_blocked'.
Мультиязычность: Перевод системных сообщений ("Сообщение удалено", "Пересланное сообщение") через i18n.
Чекпоинт: Тест на создание (200), отправку (200), пересылку (200), блокировку (200), ошибки (403, 404), WebSocket, запись в progress.json.
2.3. Управление сообщениями:
API:
GET /chat/:id/messages: Получение сообщений (пагинация, фильтр isDeleted=0, включает replyToMessageId).
PATCH /chat/message/:id: Редактирование (автор, ≤ 24 часов).
DELETE /chat/message/:id: Удаление своего сообщения.
DELETE /chat/:id/messages: Удаление переписки у себя.
DELETE /chat/:id/messages/selected (админ): Удаление выделенных.
DELETE /chat/:id/messages/by-date (админ): Удаление по дате.
WebSocket: 'message_edited', 'message_deleted', 'typing' (если showTyping=1).
Чекпоинт: Тесты на получение (200), редактирование (200), удаление (200), ошибки (403, 404), WebSocket, запись в progress.json.
2.4. Модерация и информация:
API: POST /chat/:id/moderate (админ), POST /chat/:id/pin, GET /chat/:id (участники с isOnline, lastSeen).
WebSocket: 'message_pinned', 'user_banned'.
Чекпоинт: Тесты на модерацию (200), закрепление (200), получение (200), ошибки (403, 404), WebSocket, запись в progress.json.
Этап 3: Media Service (Медиа и голосовые)
3.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, PostgreSQL (media_db: files, stickers), хранилище (локально или S3).
API Gateway: Маршруты /media/* → Media Service (порт 3003).
Чекпоинт: Тест GET /media/health (200 OK), запись в progress.json.
3.2. Управление медиа:
API:
POST /media/chat/:id/file: Загрузка файла (≤ 2 ГБ, ffmpeg).
POST /media/chat/:id/voice: Голосовое (WAV/MP3, ≤ 10 МБ, ffmpeg, STT если transcribeVoice=1).
POST /media/sticker: Стикер (PNG/GIF, ≤ 512 КБ).
GET /media/file/:id: Скачивание файла.
GET /media/stickers: Список стикеров.
Таблица files: id, chatId, messageId, url, type (TEXT: 'image', 'video', 'voice', 'file'), duration (INTEGER NULLABLE), transcription (TEXT NULLABLE).
WebSocket: 'new_file', 'new_voice', 'sticker_added'.
Чекпоинт: Тесты на загрузку (200), скачивание (200), ошибки (413, 415, 404), WebSocket, запись в progress.json.
Этап 4: Bot Service (Боты и n8n)
4.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, PostgreSQL (bot_db: bots, bot_commands).
API Gateway: Маршруты /bot/* → Bot Service (порт 3004).
Чекпоинт: Тест GET /bot/health (200 OK), запись в progress.json.
4.2. Управление ботами:
API:
POST /bot: Создание бота.
GET /bot/chat/:id: Список ботов в чате.
POST /bot/:id/command: Добавление команды.
POST /bot/:id/webhook: Webhook для n8n.
POST /bot/:id/n8n-auth: OAuth для n8n.
WebSocket: 'command_executed', 'webhook_response'.
Чекпоинт: Тесты на создание (200), команды (200), интеграцию (200), ошибки (403, 404, 401), WebSocket, запись в progress.json.
Этап 5: Echo Service ('Эхо-пространство')
5.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, PostgreSQL (echo_db: echo_entries, votes, tags).
API Gateway: Маршруты /echo/* → Echo Service (порт 3005).
Чекпоинт: Тест GET /echo/health (200 OK), запись в progress.json.
5.2. Управление 'Эхо-пространством':
API:
POST /echo: Создание записи.
GET /echo/chat/:id: Получение записей.
DELETE /echo/:id: Удаление записи.
POST /echo/:id/vote: Голосование.
POST /echo/:id/tag: Добавление тега.
WebSocket: 'echo_created', 'echo_deleted', 'vote_updated', 'tag_added'.
Чекпоинт: Тесты на создание (200), получение (200), голосование (200), ошибки (403, 404), WebSocket, запись в progress.json.
Этап 6: Call Service (Звонки)
6.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, WebSocket, PostgreSQL (call_db: calls, call_participants).
API Gateway: Маршруты /call/* → Call Service (порт 3006).
Чекпоинт: Тест GET /call/health (200 OK), запись в progress.json.
6.2. Управление звонками:
API:
POST /call: Индивидуальный звонок.
POST /call/:id/answer: Ответ на звонок.
POST /call/:id/end: Завершение звонка.
POST /call/:id/video: Включение видео.
POST /call/group/:chatId/join: Групповой звонок.
POST /call/:id/leave: Выход из звонка.
WebSocket: 'call_offer', 'call_ended', 'video_state_changed', 'participant_joined', 'active_speaker'.
Чекпоинт: Тесты на звонки (200), управление (200), ошибки (403, 404, 409), WebSocket, запись в progress.json.
Этап 7: Monitoring Service (Мониторинг устройств и IP)
7.1. Настройка сервиса и базы данных:
Сервер: Node.js, Express, PostgreSQL (monitoring_db: device_logs), интеграция с Graylog/Grafana/ELK/Zabbix.
API Gateway: Маршруты /monitoring/* → Monitoring Service (порт 3007), доступ только админу.
Чекпоинт: Тест GET /monitoring/health (200 OK), запись в progress.json.
7.2. Отслеживание устройств и IP:
API:
GET /monitoring/user/:id/devices: Список устройств и IP пользователя (из sessions).
GET /monitoring/chat/:id/active: Активные пользователи в чате (устройства, IP).
Таблица device_logs: id, userId, chatId, device, ip, timestamp.
Логи: Отправка в Graylog (JSON), метрики в Grafana (Prometheus), аналитика в ELK, алерты в Zabbix (опционально).
Чекпоинт: Тесты на получение данных (200), ошибки (403, 404), интеграция с мониторингом, запись в progress.json.
Этап 8: Frontend на React (Веб-версия)
8.1. Экран авторизации и регистрации:
Как ранее, плюс выбор языка (Dropdown 48x200px, i18n с react-i18next).
Чекпоинт: Тест на вход, мультиязычность, запись в progress.json.
8.2. Главный экран: Как ранее, статусы устройств/IP для админа в списке чатов (иконка устройства 16x16px, tooltip с IP).
Чекпоинт: Тест на рендеринг, запись в progress.json.
8.3. Экран чата:
Как ранее, плюс кнопка 'Блокировать' (замок 24x24px, #FF3B30) в меню чата, перевод интерфейса (i18n).
Чекпоинт: Тест на цитирование, пересылку, блокировку, запись в progress.json.
8.4. Экран ботов и 'Эхо-пространства': Как ранее, перевод системных сообщений.
Чекпоинт: Тест на рендеринг, запись в progress.json.
8.5. Экран звонков: Как ранее, перевод интерфейса звонков.
Чекпоинт: Тест на звонки, запись в progress.json.
8.6. Панель управления:
Как ранее, плюс вкладка 'Мониторинг' (устройства/IP для админа), переключатель языка.
Чекпоинт: Тест на настройки, мониторинг, запись в progress.json.
8.7. Сборка и публикация: npm run build, деплой на Netlify/Vercel.
Чекпоинт: Тест на сборку, деплой, запись в progress.json.
Этап 9: Frontend на React Native (Мобильная версия)
9.1. Экран авторизации и регистрации: Как ранее, выбор языка (i18n).
Чекпоинт: Тест на вход, запись в progress.json.
9.2. Главный экран: Как ранее, устройства/IP для админа.
Чекпоинт: Тест на рендеринг, запись в progress.json.
9.3. Экран чата: Как ранее, кнопка 'Блокировать', перевод интерфейса.
Чекпоинт: Тест на цитирование, пересылку, блокировку, запись в progress.json.
9.4-9.7: Как 8.4-8.7, адаптация для мобильных (Expo EAS Build/Submit).
Чекпоинт: Тест на сборку, публикацию, запись в progress.json.
Этап 10: Frontend на Electron (Десктопная версия)
10.1-10.8: Как 8.1-8.7, адаптация для десктопа (Electron Builder, автообновление).
Чекпоинт: Тест на сборку, обновление, запись в progress.json.
Этап 11: Интеграция и деплой
11.1. API Gateway: Express Gateway, маршрутизация, Redis для кеширования токенов.
Чекпоинт: Тест на маршруты, запись в progress.json.
11.2. Docker Compose:
yaml

Collapse

Wrap

Copy
version: '3.8'
services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
  auth-service:
    build: ./auth-service
    ports:
      - "3001:3001"
    volumes:
      - auth-db-data:/app/data/db
  chat-service:
    build: ./chat-service
    ports:
      - "3002:3002"
    volumes:
      - chat-db-data:/app/data/db
  # ... другие сервисы аналогично
  redis:
    image: redis:6
    ports:
      - "6379:6379"
volumes:
  auth-db-data:
  chat-db-data:
  # ... другие тома
Чекпоинт: Тест на запуск, запись в progress.json.
11.3. Мониторинг:
Graylog: Логи через UDP (GELF).
Grafana: Prometheus для метрик (CPU, RAM, запросы).
ELK: Аналитика логов (Elasticsearch, Logstash, Kibana).
Zabbix: Алерты (SNMP или API).
Конфигурация в .env: MONITORING_TYPE=graylog|grafana|elk|zabbix.
Чекпоинт: Тест на отправку логов/метрик, запись в progress.json.
11.4. Деплой: Kubernetes (опционально) или Docker Compose на сервер.
Чекпоинт: Тест на деплой, запись в progress.json.
Инструкции по написанию кода:
Структура:
Сервисы: /services/<service-name>/src/.
Фронтенд: /src/shared/, /src/web/, /src/mobile/, /src/desktop/.
Чекпоинты: Тесты (Jest), запись в progress.json, независимость сервисов.
Тестирование:
Сервисы: supertest, WebSocket-клиент.
Веб: @testing-library/react.
Мобильное: @testing-library/react-native.
Десктопное: electron-mocha.