Техническое задание (ТЗ): NexChat — Мультиплатформенный мессенджер
Общее описание:
Название: NexChat
Цель: Создать мультиплатформенный мессенджер с минималистичным дизайном (вдохновлён Telegram), расширенными функциями (медиа, стикеры, звонки, боты, 'Эхо-пространство', голосовые сообщения, редактирование/удаление сообщений, профили, статусы) и панелью управления (в стиле Rocket.Chat).
Платформы:
Сервер: Node.js, deploy через Docker Compose.
Веб-версия: React (браузеры Chrome, Firefox, Safari).
Мобильное приложение: iOS/Android (React Native).
Десктопное приложение: Windows/Mac/Linux (Electron).
Особенности: Поддержка медиа, пользовательских стикеров, кастомных звуков уведомлений, WebRTC-звонков, голосовых сообщений, редактирования/удаления сообщений, статусов (онлайн, "печатает", "прочитано"), профиля, модульная структура.
Технические требования:
Языки и инструменты: Node.js v18+, Express v4.18, WebSocket (ws v8.14), SQLite (sqlite3), React v18+, React Native v0.73+, Electron v28+, TypeScript, Docker v20+, Docker Compose v2+.
Цветовая палитра:
Светлая тема: Фон #FFFFFF, текст #000000, акцент #007AFF, второстепенный #666666.
Тёмная тема: Фон #1C2526, текст #E8ECEF, акцент #00C4CC, второстепенный #A9A9A9.
Шрифт: Roboto (Regular 16px, Medium 16px, Bold 18px, подписи 14px).
Анимации: Плавные, ненавязчивые (переходы 300ms Easing.ease, fade-in/out 200ms).
Этапы разработки:
Этап 1: Базовый сервер и API для чатов
1.1. Настройка сервера и авторизации
1.1.1. Инициализация сервера:
Установи Node.js, Express, WebSocket, SQLite с таблицами: users, chats, chat_members, messages, reactions, stickers.
Запусти сервер на порту 3000 (/src/server.js).
Чекпоинт: Тест GET / (200 OK), запись в progress.json.
1.1.2. Реализация авторизации и профиля:
API:
POST /api/auth/register: создание пользователя с JWT (jsonwebtoken v9.0), ключи шифрования (libsodium).
POST /api/auth/login: вход с JWT.
POST /api/auth/recover: восстановление пароля (email, код).
PATCH /api/user/password: смена пароля.
Таблица users: id, username, passwordHash, email, phone (NULLABLE), status (TEXT, ≤ 50 символов), birthDate (DATE NULLABLE), transcribeVoice (BOOLEAN DEFAULT 0), notificationSoundUrl (TEXT), isOnline (BOOLEAN DEFAULT 0), lastSeen (TIMESTAMP), showTyping (BOOLEAN DEFAULT 1), showReadTimestamps (BOOLEAN DEFAULT 0).
WebSocket: Подключение (?token=<jwt>), события 'connected', 'user_online', 'user_offline'.
Чекпоинт: Тесты на регистрацию (201), вход (200), восстановление (200), смену пароля (200), ошибки (400, 409, 401), запись в progress.json.
1.2. Личные чаты
1.2.1. Создание личных чатов: API POST /api/chat/personal.
Чекпоинт: Тест на создание (200), ошибки (400, 409), запись в progress.json.
1.2.2. Отправка текстовых и голосовых сообщений:
API:
POST /api/message: текст (шифрование libsodium).
POST /api/chat/:id/voice: голосовое (WAV/MP3, ≤ 10 МБ), ffmpeg для duration, STT (если transcribeVoice=1).
Таблица messages: id, chatId, userId, content, voiceUrl (TEXT), duration (INTEGER), transcription (TEXT NULLABLE), isEdited (BOOLEAN DEFAULT 0), isDeleted (BOOLEAN DEFAULT 0), readAt (TIMESTAMP NULLABLE), createdAt, updatedAt.
WebSocket: 'new_message', 'new_voice', 'message_read'.
Чекпоинт: Тест на отправку (200), ошибки (403, 404, 413, 415), WebSocket, запись в progress.json.
1.2.3. Получение сообщений и статусов:
API: GET /api/chat/:id/messages (пагинация, фильтр isDeleted=0 для обычных пользователей).
WebSocket: 'typing' (если showTyping=1), 'read' (если showReadTimestamps=1).
Чекпоинт: Тест на получение (200), статусы, ошибки (404), запись в progress.json.
1.2.4. Редактирование и удаление сообщений:
API:
PATCH /api/message/:id: редактирование (автор, ≤ 24 часов).
DELETE /api/message/:id: удаление своего сообщения (isDeleted=1).
DELETE /api/chat/:id/messages: удаление переписки у себя.
DELETE /api/chat/:id/messages/selected (админ): удаление выделенных.
DELETE /api/chat/:id/messages/by-date (админ): удаление по дате.
WebSocket: 'message_edited', 'message_deleted'.
Чекпоинт: Тесты на редактирование (200), удаление (200), ошибки (403, 404, 400), WebSocket, запись в progress.json.
1.3. Групповые чаты
1.3.1. Создание групповых чатов: API POST /api/chat/group, chat_members с isAdmin (BOOLEAN DEFAULT 0).
Чекпоинт: Тест на создание (200), ошибки (400), запись в progress.json.
1.3.2. Модерация и закрепление сообщений: API POST /api/chat/:id/moderate (админ), POST /api/chat/:id/pin, WebSocket 'message_deleted', 'message_pinned'.
Чекпоинт: Тесты на модерацию (200), закрепление (200), ошибки (403, 404), WebSocket, запись в progress.json.
1.3.3. Получение информации о группе: API GET /api/chat/:id (включает участников с isOnline, lastSeen).
Чекпоинт: Тест на получение (200), ошибки (404), запись в progress.json.
1.4. Добавление файлов, медиа и стикеров
1.4.1. Загрузка медиа: API POST /api/chat/:id/file (≤ 2 ГБ, ffmpeg, STT для голосовых), WebSocket 'new_file'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415), WebSocket, запись в progress.json.
1.4.2. Управление стикерами: API POST /api/sticker (PNG/GIF, ≤ 512 КБ), GET /api/stickers, WebSocket 'sticker_added'.
Чекпоинт: Тесты на загрузку (200), список (200), ошибки (413, 415), запись в progress.json.
1.4.3. Скачивание файлов: API GET /api/file/:messageId, GET /api/sticker/:stickerId.
Чекпоинт: Тест на скачивание (200), ошибки (404), запись в progress.json.
1.5. Система аватарок, реакции, уведомления, голосовых и профиля
1.5.1. Аватарки (выполнен тобой):
API: POST /api/user/avatar, POST /api/chat/:id/avatar (≤ 5 МБ).
WebSocket: 'avatar_updated'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415), WebSocket, запись в progress.json (выполнено).
1.5.2. Реакции: API POST /api/message/:id/reaction (эмодзи ≤ 10 символов), WebSocket 'reaction_added', 'reaction_removed'.
Чекпоинт: Тест на реакцию (200), ошибки (403, 404), WebSocket, запись в progress.json.
1.5.3. Запись и отправка голосовых сообщений:
API: POST /api/chat/:id/voice (WAV/MP3, ≤ 10 МБ), ffmpeg, STT.
WebSocket: 'new_voice'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415), WebSocket, запись в progress.json.
1.5.4. Кастомные звуки уведомлений: API POST /api/user/notification-sound (MP3/WAV, ≤ 1 МБ, ≤ 5 сек), WebSocket 'notification_sound_updated', 'notification'.
Чекпоинт: Тест на загрузку (200), ошибки (413, 415, 400), WebSocket, запись в progress.json.
1.5.5. Профиль пользователя:
API: GET /api/user/:id, PATCH /api/user/profile (status, birthDate, email, phone).
WebSocket: 'profile_updated'.
Чекпоинт: Тест на получение (200), обновление (200), ошибки (400, 403), WebSocket, запись в progress.json.
Этап 2: Логика ботов и интеграция с n8n
2.1. Создание ботов:
2.1.1. Регистрация ботов: API POST /api/bot.
Чекпоинт: Тест на создание (200), ошибки (403, 404), запись в progress.json.
2.1.2. Получение списка: API GET /api/chat/:id/bots.
Чекпоинт: Тест на получение (200), ошибки (404), запись в progress.json.
2.2. Конструктор ботов:
2.2.1. Добавление команд: API POST /api/bot/:id/command.
Чекпоинт: Тест на добавление (200), ошибки (403, 409), запись в progress.json.
2.2.2. Обработка команд: Логика /command, WebSocket 'command_executed'.
Чекпоинт: Тест на выполнение (200), WebSocket, запись в progress.json.
2.3. Интеграция с n8n:
2.3.1. Настройка Webhook: API POST /api/bot/:id/webhook.
Чекпоинт: Тест на настройку (200), ошибки (400, 403), запись в progress.json.
2.3.2. OAuth и выполнение: API POST /api/bot/:id/n8n-auth, WebSocket 'webhook_response'.
Чекпоинт: Тест на авторизацию (200), выполнение (200), ошибки (401), запись в progress.json.
Этап 3: 'Эхо-пространство'
3.1. Классификация сообщений:
3.1.1. Создание записи: API POST /api/echo.
Чекпоинт: Тест на создание (200), ошибки (403, 404), запись в progress.json.
3.1.2. Логика классификации: Задача/идея/заметка, WebSocket 'echo_created'.
Чекпоинт: Тест на классификацию (200), WebSocket, запись в progress.json.
3.2. Хранение и синхронизация:
3.2.1. Получение записей: API GET /api/chat/:id/echo.
Чекпоинт: Тест на получение (200), фильтры, запись в progress.json.
3.2.2. Удаление записей: API DELETE /api/echo/:id, WebSocket 'echo_deleted'.
Чекпоинт: Тест на удаление (200), ошибки (403, 404), WebSocket, запись в progress.json.
3.3. Интерактивные функции:
3.3.1. Голосование: API POST /api/echo/:id/vote, WebSocket 'vote_updated'.
Чекпоинт: Тест на голосование (200), ошибки (403, 404), WebSocket, запись в progress.json.
3.3.2. Теги и уведомления: API POST /api/echo/:id/tag, WebSocket 'tag_added'.
Чекпоинт: Тест на теги (200), уведомления, WebSocket, запись в progress.json.
Этап 4: Звонки через WebRTC
4.1. Индивидуальные голосовые звонки:
4.1.1. Инициация звонка: API POST /api/call.
Чекпоинт: Тест на создание (200), ошибки (400, 409), запись в progress.json.
4.1.2. Управление звонком: API POST /api/call/:id/answer, POST /api/call/:id/end, WebSocket 'call_offer', 'call_ended'.
Чекпоинт: Тест на управление (200), WebSocket, запись в progress.json.
4.2. Видеозвонки:
4.2.1. Включение видео: API POST /api/call/:id/video, WebSocket 'video_state_changed'.
Чекпоинт: Тест на видео (200), ошибки (404, 409), WebSocket, запись в progress.json.
4.3. Групповые звонки:
4.3.1. Присоединение: API POST /api/call/group/:chatId/join.
Чекпоинт: Тест на подключение (200), ошибки (403, 409), запись в progress.json.
4.3.2. Управление участниками: API POST /api/call/:id/leave, WebSocket 'participant_joined', 'active_speaker'.
Чекпоинт: Тест на управление (200), WebSocket, запись в progress.json.
Этап 5: Frontend на React (Веб-версия)
5.1. Экран авторизации и регистрации
5.1.1. Экран входа:
Фон: #FFFFFF / #1C2526, чистый.
Логотип: Чат (64x64px, #007AFF / #00C4CC), центрировано, отступ 32px сверху, fade-in 300ms.
Поля:
'Имя пользователя': Input 48x400px, закругление 8px, #F2F2F7 / #354345, фокус — обводка 1px #007AFF / #00C4CC (200ms), текст 16px Regular.
'Пароль': Input 48x400px, иконка глаза (24x24px, #666666 / #A9A9A9), отступ 16px снизу.
Кнопка 'Войти': 48x160px, #007AFF / #00C4CC, текст 16px белый Medium, scale 0.95 (200ms), hover — opacity 0.9.
Ссылка 'Регистрация': 14px подчёркнутый #007AFF / #00C4CC, opacity 0.7 при hover (200ms).
Ошибка: 14px #FF3B30, fade-in 200ms.
Чекпоинт: Тест на вход, запись в progress.json.
5.1.2. Экран регистрации:
Как 5.1.1, плюс 'Повторить пароль' (48x400px), валидация (debounce 300ms), ошибка — shake 200ms.
Кнопка 'Зарегистрироваться': 48x160px, #007AFF / #00C4CC.
Ссылка 'Войти': 14px подчёркнутый.
Чекпоинт: Тест на регистрацию, запись в progress.json.
5.1.3. Восстановление пароля:
Поле 'Email': 48x400px, закругление 8px.
Кнопка 'Отправить код': 48x160px, #007AFF / #00C4CC, scale 0.95 (200ms).
Поле 'Код' + 'Новый пароль' (2x 48x400px), кнопка 'Сохранить'.
Анимация: Fade-in 200ms для шагов.
Чекпоинт: Тест на восстановление, запись в progress.json.
5.2. Главный экран (список чатов)
5.2.1. Список чатов:
Фон: #FFFFFF / #1C2526, двухколоночный (300px список, остальное чат).
Заголовок: 'NexChat' 18px Bold, #000000 / #E8ECEF, отступ 16px сверху, иконка меню (☰ 24x24px, scale 0.9 при клике).
Список:
Аватар: 48x48px, круг, #E5E5EA / #2D3839 (если пусто).
Название: 16px Medium, обрезка '...'.
Последнее сообщение: 14px Regular, #666666 / #A9A9A9.
Статус: Круг 12x12px (#34C759 если isOnline, #666666 / #A9A9A9 если offline), "Был в сети <lastSeen>" (14px).
Счётчик: 20x20px, #007AFF / #00C4CC, 12px белый.
Анимация: Slide-up + fade-in (300ms, stagger 50ms), выбор — фон #F2F2F7 / #354345 (200ms).
Кнопка 'Новый чат': 48x120px, #007AFF / #00C4CC, scale 0.95 (200ms).
Чекпоинт: Тест на рендеринг, статусы, запись в progress.json.
5.2.2. Поиск и фильтры:
Поле поиска: 48x300px, закругление 24px, #F2F2F7 / #354345, лупа 24x24px, фокус — обводка 1px (200ms).
Фильтры: Выпадающее меню ('Все', 'Личные', 'Группы'), активная — #007AFF / #00C4CC, fade-in 200ms.
Чекпоинт: Тест на поиск, фильтры, запись в progress.json.
5.3. Экран чата
5.3.1. Лента сообщений:
Фон: #FFFFFF / #1C2526.
Заголовок:
Аватар: 40x40px, круг.
Название: 18px Bold, обрезка '...'.
Статус: "Онлайн" (14px #34C759) / "Был в сети <lastSeen>" (14px #666666 / #A9A9A9), "Печатает..." (14px).
'Инфо': 'i' 24x24px, scale 0.9 (200ms).
Сообщения:
Текст: Чужие — #E5E5EA / #2D3839, свои — #007AFF / #00C4CC, закругление 8px, до 80%, 16px Regular.
Голосовые: 400x20px, прогресс-бар 4px #007AFF / #00C4CC, play/pause 24x24px, транскрибация 14px #666666 / #A9A9A9.
Медиа: 400x400px, закругление 8px.
Стикеры: 200x200px.
Статусы: ✓ (16x16px, #007AFF / #00C4CC) если readAt, две ✓ с "Прочитано <readAt>" (12px) если showReadTimestamps=1.
Выделение: Чекбокс 20x20px справа, фон #F2F2F7 / #354345.
Редактировано: "(ред.)" 12px #666666 / #A9A9A9.
Удалено: "Сообщение удалено" 14px курсив #666666 / #A9A9A9.
Анимация: Slide-up + fade-in (200ms), удаление — fade-out 200ms.
Чекпоинт: Тест на рендеринг, статусы, выделение, запись в progress.json.
5.3.2. Полноэкранный режим медиа:
Фон: #000000, контент 100%, плеер 400x40px для голосовых.
Кнопки: 'Закрыть' (X 24x24px), play/pause (48x48px), fade-in 200ms.
Чекпоинт: Тест на просмотр, запись в progress.json.
5.3.3. Поле ввода и интерактивность:
Поле: 48x80%, закругление 24px, #F2F2F7 / #354345, фокус — обводка 1px (200ms).
Иконки: Эмодзи (😊), Стикеры (🎉), Файл (paperclip), Микрофон (🎙), 24x24px, scale 0.9 (200ms).
Микрофон: Клик → запись (полоса 4px #007AFF / #00C4CC, max 60 сек), повторный клик — отправка, Esc — отмена (fade-out 200ms).
Отправка: 40x40px, стрелка →, fade-in 200ms.
Меню (правый клик): Fade-in 200ms, 'Редактировать', 'Удалить', 'Ответить', 'Переслать'.
Панель выделения: 'Удалить выбранные' (корзина 24x24px, #FF3B30).
Чекпоинт: Тест на ввод, запись голосового (react-media-recorder), редактирование, удаление, запись в progress.json.
5.4. Экран ботов и 'Эхо-пространства'
5.4.1. Экран ботов: Таблица (Имя, Чат, Настройки), кнопка 'Добавить' (48x120px, #007AFF / #00C4CC), fade-in 300ms.
Чекпоинт: Тест на рендеринг, запись в progress.json.
5.4.2. Настройка бота: Модальное окно 600x400px, поля 'Имя', 'Команды', 'Webhook' (48x100%), 'Сохранить' (48x120px), scale 0.95 (200ms).
Чекпоинт: Тест на настройку, запись в progress.json.
5.4.3. 'Эхо-пространство': Вкладки (Tasks, Notes, Ideas) в панели 300px, контент справа, slide-right 200ms.
Чекпоинт: Тест на рендеринг, запись в progress.json.
5.5. Экран звонков
5.5.1. Индивидуальный звонок: Фон #000000, видео/аватар 80%, имя 18px белый, кнопки (mute, video, end 64x64px #FF3B30), fade-in 200ms.
Чекпоинт: Тест на звонок, запись в progress.json.
5.5.2. Групповой звонок: Сетка 128x128px, активный — рамка 2px #007AFF / #00C4CC, кнопки как в 5.5.1.
Чекпоинт: Тест на групповой звонок, запись в progress.json.
5.6. Панель управления
5.6.1. Основная структура: Панель 300px слева, вкладки 48px, активная — #007AFF / #00C4CC, fade-in 200ms.
Чекпоинт: Тест на рендеринг, запись в progress.json.
5.6.2. Управление чатами и ботами: Таблица, 'Редактировать', 'Удалить переписку' (#FF3B30), 'Создать группу' (48x120px).
Чекпоинт: Тест на управление, запись в progress.json.
5.6.3. 'Эхо-пространство' и звонки: Фильтры, история звонков.
Чекпоинт: Тест на рендеринг, запись в progress.json.
5.6.4. Настройки, стикеры и звуки:
Настройки: Тема (переключатель 24x48px), уведомления (чекбоксы), язык (Dropdown), "Показывать 'Печатает'", "Показывать время прочтения", "Транскрибировать голосовые".
'Сменить пароль': Модальное окно, поля 48x400px, 'Сохранить'.
Стикеры: Сетка 64x64px, 'Добавить', 'Удалить' (#FF3B30).
Звуки: Плеер 200x20px, 'Выбрать', 'Сбросить'.
Чекпоинт: Тест на настройки, запись в progress.json.
5.6.5. Профиль:
Аватар: 96x96px, редактирование (камера 24x24px).
Поля: 'Имя пользователя' (16px Bold), 'Статус' (16px), 'Дата рождения', 'Email', 'Телефон' (14px).
'Редактировать': 48x120px, #007AFF / #00C4CC, scale 0.95 (200ms).
Анимация: Fade-in 200ms, slide-up 200ms при редактировании.
Чекпоинт: Тест на рендеринг, редактирование, запись в progress.json.
5.7. Сборка и публикация:
5.7.1. Сборка: npm run build, оптимизация (react-scripts).
Чекпоинт: Тест на сборку, запись в progress.json.
5.7.2. Деплой: Размещение на статическом хостинге (Netlify/Vercel).
Чекпоинт: Тест на деплой, запись в progress.json.
Этап 6: Frontend на React Native (Мобильная версия, iOS/Android)
6.1. Экран авторизации и регистрации: Как 5.1, поля 48x300px, кнопки 48x120px, биометрия (expo-local-authentication).
Чекпоинт: Тест на вход, восстановление, запись в progress.json.
6.2. Главный экран: Как 5.2, FlatList, FAB 56x56px '+', уведомления (expo-notifications).
Чекпоинт: Тест на рендеринг, запись в progress.json.
6.3. Экран чата: Как 5.3, сообщения до 70%, голосовые 200x20px, жесты (react-native-gesture-handler), запись голосовых (@react-native-community/audio-toolkit).
Чекпоинт: Тест на рендеринг, запись, редактирование, запись в progress.json.
6.4. Экран ботов и 'Эхо-пространства': Как 5.4, Tab Navigator, вибрация (expo-haptics).
Чекпоинт: Тест на рендеринг, запись в progress.json.
6.5. Экран звонков: Как 5.5, фоновый режим (expo-keep-awake).
Чекпоинт: Тест на звонки, запись в progress.json.
6.6. Панель управления: Как 5.6, панель 300px / 80%, свайп, профиль как 5.6.5.
Чекпоинт: Тест на рендеринг, настройки, запись в progress.json.
6.7. Сборка и публикация: Expo EAS Build, EAS Submit.
Чекпоинт: Тест на сборку, публикацию, запись в progress.json.
Этап 7: Frontend на Electron (Десктопная версия, Windows/Mac/Linux)
7.1. Инициализация проекта: Electron v28+, окно 1200x800px, electron-vite.
Чекпоинт: Тест на запуск, запись в progress.json.
7.2. Экран авторизации и регистрации: Как 5.1, поля 48x400px, автозапуск (electron-store).
Чекпоинт: Тест на вход, восстановление, запись в progress.json.
7.3. Главный экран: Как 5.2, двухколоночный, уведомления (electron-notification).
Чекпоинт: Тест на рендеринг, запись в progress.json.
7.4. Экран чата: Как 5.3, сообщения до 80%, голосовые 400x20px, drag-and-drop, горячие клавиши (Ctrl+M для записи, electron-media-recorder).
Чекпоинт: Тест на рендеринг, запись, редактирование, запись в progress.json.
7.5. Экран ботов и 'Эхо-пространства': Как 5.4, таблица для ботов, вкладки в панели 300px.
Чекпоинт: Тест на рендеринг, запись в progress.json.
7.6. Экран звонков: Как 5.5, окно 800x600px, tray (electron Tray API).
Чекпоинт: Тест на звонки, запись в progress.json.
7.7. Панель управления: Как 5.6, панель 300px, профиль как 5.6.5.
Чекпоинт: Тест на рендеринг, настройки, запись в progress.json.
7.8. Сборка и публикация: electron-builder, автообновление (electron-updater).
Чекпоинт: Тест на сборку, обновление, запись в progress.json.
Этап 8: Сборка и деплой с Docker Compose
8.1. Подготовка миграций: knex.js, скрипт "migrate": "knex migrate:latest".
Чекпоинт: Тест на миграцию, запись в progress.json.
8.2. Dockerfile:
dockerfile

Свернуть

Перенос

Копировать
FROM node:18
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run migrate
EXPOSE 3000
CMD ["npm", "start"]
Чекпоинт: Тест на сборку, запись в progress.json.
8.3. Docker Compose:
yaml

Свернуть

Перенос

Копировать
version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - db-data:/app/data/db
      - uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
volumes:
  db-data:
  uploads:
setup.js для директорий, "postinstall": "node setup.js".
Чекпоинт: Тест на запуск, запись в progress.json.
8.4. Тестирование и деплой: Локальные тесты, деплой на сервер с .env.
Чекпоинт: Тест на деплой, запись в progress.json.
Инструкции по написанию кода:
Структура:
Сервер: /src/server.js, /src/models/, /src/routes/, /src/utils/, /tests/.
Фронтенд: /src/shared/, /src/web/, /src/mobile/, /src/desktop/.
Чекпоинты: Тесты (Jest), запись в progress.json, уведомления при редактировании прошлых файлов.
Тестирование:
Сервер: supertest, WebSocket-клиент.
Веб: @testing-library/react.
Мобильное: @testing-library/react-native.
Десктопное: electron-mocha.